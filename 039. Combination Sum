Description:
Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

Solution:
class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> results;
        if (candidates.size() <= 0) {
            return results;
        }
        vector<int> combination;
        sort(candidates.begin(), candidates.end());
        helper(results, combination, candidates, target, 0);
        return results;
    }

private:
    void helper(vector<vector<int>>& results, vector<int>& combination, vector<int>& candidates, int target, int startIdx) {
        if (target == 0) {
            results.push_back(combination);
            return;
        }
        for (int i = startIdx; i < candidates.size(); i++) {
            if (target < candidates[i]) {
                break;
            }
            if (i != 0 && candidates[i] == candidates[i - 1]) { // 去重 
                continue;
            }
            combination.push_back(candidates[i]);
            helper(results, combination, candidates, target - candidates[i], i);
            combination.pop_back();
        }
        
    }
};
