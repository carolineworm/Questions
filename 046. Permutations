Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> results;
        if (nums.empty()) {
            return results;
        }
        vector<int> list; // list to store each permutation
        helper(results, list, nums);
        return results;
    }
private:
    void helper(vector<vector<int>>& results, vector<int>& list, vector<int>& nums) {
        if (list.size() == nums.size()) {
            results.push_back(list);
            return;
        }
        
        for (int num : nums) {
            if (find (list.begin(), list.end(), num) != list.end()) { // O(n) time complexity
                continue;
            }
            list.push_back(num);
            helper(results, list, nums);
            list.pop_back();
        }
    }
};
