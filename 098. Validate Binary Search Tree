Description:
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:

Input:
    2
   / \
  1   3
Output: true
Example 2:

    5
   / \
  1   4
     / \
    3   6
Output: false
Explanation: The input is: [5,1,4,null,null,3,6]. The root node's value
             is 5 but its right child's value is 4.

Solution:
1. Iterative
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        if (!root)  return true;
        TreeNode *node = root, *prev = NULL;
        stack<TreeNode*> s;
        while (node || !s.empty()) {
            while (node) {
                s.push(node);
                node = node->left;
            }
            TreeNode *temp = s.top();
            s.pop();
            if (prev && temp->val <= prev->val) return false;
            prev = temp;
            node = temp->right;
        }
        return true;
    }
};

2. Recursion
class Solution {
private:
    bool helper(TreeNode* root, long int minValue, long int maxValue) {
        if (root == NULL) return true;
        if (root->val <= minValue || root->val >= maxValue) return false;
        return helper(root->left, minValue, (long int) root->val)
            && helper(root->right, (long int) root->val, maxValue);
    }
public:
    bool isValidBST(TreeNode* root) {
        return helper(root, LONG_MIN, LONG_MAX);
    }
};
