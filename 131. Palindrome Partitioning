Description:
Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

Example:

Input: "aab"
Output:
[
  ["aa","b"],
  ["a","a","b"]
]

Solution:
class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> results;
        if (s.size() <= 0) {
            return results;
        }
        vector<string> partition;
        helper(s, 0, partition, results);
        return results;
    }

private:
    void helper(string s, int startIdx, vector<string>& partition, 
                vector<vector<string>>& results) {
        if (startIdx == s.size()) {
            results.push_back(partition);
            return;
        }
        for (int i = startIdx; i < s.size(); i++) {
            string subString = s.substr(startIdx, i - startIdx + 1);
            if (!isPalindrome(subString)) {
                continue;
            }
            partition.push_back(subString);
            helper(s, i + 1, partition, results);
            partition.pop_back();
        }
        
    }
    
    bool isPalindrome(string s) {
        for (int i = 0, j = s.size() - 1; i < j; i++, j--) {
            if (s[i] != s[j]) {
                return false;
            }
        }
        return true;
    }
};
