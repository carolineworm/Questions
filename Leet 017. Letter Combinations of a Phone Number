Description:
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

Solution:
1. Recursive
class Solution {
public:
   vector<string> letterCombinations(string digits) {
        if (digits.empty()) return {};
        vector<string> results;
        string dict[] = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        helper(digits, dict, 0, "", results);
        return results;
    }
    
private:
    void helper(string digits, string dict[], int level, string combination, vector<string>& results) {
        if (level == digits.size()) {results.push_back(combination); return;}
        string str = dict[digits[level] - '0'];
        for (int i = 0; i < str.size(); ++i) {
            helper(digits, dict, level + 1, combination + str[i], results);
        }
    }
};

2. Iterative
class Solution {
public:
   vector<string> letterCombinations(string digits) {
        if (digits.empty()) return {};
        vector<string> results{""};
        string dict[] = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        for (int i = 0; i < digits.size(); i++) {
            vector<string> temp;
            string str = dict[digits[i] - '0'];
            for (int j = 0; j < str.size(); j++) {
                for (string s : results) temp.push_back(s + str[j]);
            }
            results = temp;
        }
        return results;
    }
};
